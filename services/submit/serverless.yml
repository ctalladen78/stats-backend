service: stats-app-2-submit

package:
  individually: true

plugins:
  - serverless-bundle # Package our functions with Webpack
  - serverless-offline

custom:
  # Our stage is based on what is passed in when running serverless
  # commands. Or fallsback to what we have set in the provider section.
  stage: ${opt:stage, self:provider.stage}

provider:
  name: aws
  runtime: nodejs10.x
  stage: dev
  region: eu-west-2

  apiGateway:
    restApiId:
      'Fn::ImportValue': ${self:custom.stage}-ExtApiGatewayRestApiId
    restApiRootResourceId:
      'Fn::ImportValue': ${self:custom.stage}-ExtApiGatewayRestApiRootResourceId

  # These environment variables are made available to our functions
  # under process.env.
  environment:
    tableHistory:
      'Fn::ImportValue': ${self:custom.stage}-HistoryTableName
    tablePlayer: 
      'Fn::ImportValue': ${self:custom.stage}-PlayerTableName
    tableFaction:
      'Fn::ImportValue': ${self:custom.stage}-FactionTableName
    tableCommander:
      'Fn::ImportValue': ${self:custom.stage}-CommanderTableName
    playerProfile: 
      'Fn::ImportValue': ${self:custom.stage}-PlayerProfileTableName
    # maestersChain: 
    #   'Fn::ImportValue': ${self:custom.stage}-MaestersChainTableName

  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:DescribeTable
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource:
        - 'Fn::ImportValue': ${self:custom.stage}-ExtHistoryTableArn
        - 'Fn::ImportValue': ${self:custom.stage}-ExtPlayerTableArn
        - 'Fn::ImportValue': ${self:custom.stage}-ExtFactionTableArn
        - 'Fn::ImportValue': ${self:custom.stage}-ExtCommanderTableArn
        - 'Fn::ImportValue': ${self:custom.stage}-ExtPlayerProfileArn
        # - 'Fn::ImportValue': ${self:custom.stage}-ExtMaestersChainArn

functions:
  submit:
    handler: submit.main
    events:
      - http:
          path: submit-result
          method: post
          cors: true
          authorizer: aws_iam

  submitTTS:
    handler: submitTTS.main
    events:
      - http:
          path: submit-TTS
          method: post
          cors: true
          authorizer: aws_iam

  maester:
    handler: maester.main
    events:
      - http:
          path: maester-result
          method: post
          cors: true
          authorizer: aws_iam

  maesterTTS:
    handler: maesterTTS.main
    events:
      - http:
          path: maester-TTS
          method: post
          cors: true
          authorizer: aws_iam