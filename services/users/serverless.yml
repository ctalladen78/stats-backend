service: stats-app-2-users

package:
  individually: true

plugins:
  - serverless-bundle # Package our functions with Webpack
  - serverless-offline

custom:
  stage: ${opt:stage, self:provider.stage}

provider:
  name: aws
  runtime: nodejs10.x
  stage: dev
  region: eu-west-2

  apiGateway:
    restApiId:
      'Fn::ImportValue': ${self:custom.stage}-ExtApiGatewayRestApiId
    restApiRootResourceId:
      'Fn::ImportValue': ${self:custom.stage}-ExtApiGatewayRestApiRootResourceId

  # These environment variables are made available to our functions
  # under process.env.
  environment:
    tablePlayer: 
      'Fn::ImportValue': ${self:custom.stage}-PlayerTableName
    playerProfile: 
      'Fn::ImportValue': ${self:custom.stage}-PlayerProfileTableName
    savedLists: 
      'Fn::ImportValue': ${self:custom.stage}-SavedListsTableName

  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:DescribeTable
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource:
        - 'Fn::ImportValue': ${self:custom.stage}-ExtPlayerProfileArn
        - 'Fn::ImportValue': ${self:custom.stage}-ExtPlayerTableArn
        - 'Fn::ImportValue': ${self:custom.stage}-ExtSavedListsArn

functions:
  createprofile:
    handler: createprofile.main
    events:
      - http:
          path: player-profile
          method: post
          cors: true
          authorizer: aws_iam

  tempprofile:
    handler: tempprofile.main
    events:
      - http:
          path: temp-profile
          method: post
          cors: true
          authorizer: aws_iam

  editprofile:
    handler: editprofile.main
    events:
      - http:
          path: profile-edit
          method: post
          cors: true
          authorizer: aws_iam

  findplayergames:
    handler: findplayergames.main
    events:
      - http:
          path: get-player-games/{id}
          method: get
          cors: true
          authorizer: aws_iam

  setttsranking:
    handler: setttsranking.main
    events:
      - http:
          path: set-tts
          method: post
          cors: true
          authorizer: aws_iam

  savelist:
    handler: savelist.main
    events:
      - http:
          path: save-list
          method: post
          cors: true
          authorizer: aws_iam

  mylists:
    handler: mylists.main
    events:
      - http:
          path: get-my-lists/{id}
          method: get
          cors: true
          authorizer: aws_iam

  getlist:
    handler: getlist.main
    events:
      - http:
          path: get-a-list/{id}
          method: get
          cors: true
          authorizer: aws_iam