service: stats-app-2-api

# Create an optimized package for our functions
package:
  individually: true

plugins:
  - serverless-bundle # Package our functions with Webpack
  - serverless-offline

custom:
  # Our stage is based on what is passed in when running serverless
  # commands. Or fallsback to what we have set in the provider section.
  stage: ${opt:stage, self:provider.stage}
  # Set the table name here so we can use it while testing locally
  tableHistory: ${self:custom.stage}-results-history
  tablePlayer: ${self:custom.stage}-player-results
  tableFaction: ${self:custom.stage}-faction-results
  tableCommander: ${self:custom.stage}-commander-results
  playerProfile: ${self:custom.stage}-player-profile
  factionProfile: ${self:custom.stage}-faction-profile
  commanderProfile: ${self:custom.stage}-commander-profile2
  tournamentInfo: ${self:custom.stage}-tournament-info
  tournamentPlayers: ${self:custom.stage}-tournament-players
  tournamentGames: ${self:custom.stage}-tournament-games

provider:
  name: aws
  runtime: nodejs10.x
  stage: dev
  region: eu-west-2

  # These environment variables are made available to our functions
  # under process.env.
  environment:
    tableHistory: ${self:custom.tableHistory}
    tablePlayer: ${self:custom.tablePlayer}
    tableFaction: ${self:custom.tableFaction}
    tableCommander: ${self:custom.tableCommander}
    playerProfile: ${self:custom.playerProfile}
    factionProfile: ${self:custom.factionProfile}
    commanderProfile: ${self:custom.commanderProfile}
    tournamentInfo: ${self:custom.tournamentInfo}
    tournamentPlayers: ${self:custom.tournamentPlayers}
    tournamentGames: ${self:custom.tournamentGames}    

  # 'iamRoleStatements' defines the permission policy for the Lambda function.
  # In this case Lambda functions are granted with permissions to access DynamoDB.
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:DescribeTable
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      # Restrict our IAM role permissions to
      # the specific table for the stage
      Resource:
        - "Fn::GetAtt": [ HistoryTable, Arn ]

    - Effect: Allow
      Action:
        - dynamodb:DescribeTable
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      # Restrict our IAM role permissions to
      # the specific table for the stage
      Resource:
        - "Fn::GetAtt": [ PlayerTable, Arn ]

    - Effect: Allow
      Action:
        - dynamodb:DescribeTable
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      # Restrict our IAM role permissions to
      # the specific table for the stage
      Resource:
        - "Fn::GetAtt": [ FactionTable, Arn ]

    - Effect: Allow
      Action:
        - dynamodb:DescribeTable
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      # Restrict our IAM role permissions to
      # the specific table for the stage
      Resource:
        - "Fn::GetAtt": [ CommanderTable, Arn ]

    - Effect: Allow
      Action:
        - dynamodb:DescribeTable
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      # Restrict our IAM role permissions to
      # the specific table for the stage
      Resource:
        - "Fn::GetAtt": [ PlayerProfile, Arn ]

    - Effect: Allow
      Action:
        - dynamodb:DescribeTable
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      # Restrict our IAM role permissions to
      # the specific table for the stage
      Resource:
        - "Fn::GetAtt": [ FactionProfile, Arn ]

    - Effect: Allow
      Action:
        - dynamodb:DescribeTable
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      # Restrict our IAM role permissions to
      # the specific table for the stage
      Resource:
        - "Fn::GetAtt": [ CommanderProfile, Arn ]

    - Effect: Allow
      Action:
        - dynamodb:DescribeTable
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      # Restrict our IAM role permissions to
      # the specific table for the stage
      Resource:
        - "Fn::GetAtt": [ TournamentInfo, Arn ]

    - Effect: Allow
      Action:
        - dynamodb:DescribeTable
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      # Restrict our IAM role permissions to
      # the specific table for the stage
      Resource:
        - "Fn::GetAtt": [ TournamentPlayers, Arn ]

    - Effect: Allow
      Action:
        - dynamodb:DescribeTable
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      # Restrict our IAM role permissions to
      # the specific table for the stage
      Resource:
        - "Fn::GetAtt": [ TournamentGames, Arn ]

functions:
  # Defines an HTTP API endpoint that calls the main function in create.js
  # - path: url path is /notes
  # - method: POST request
  # - cors: enabled CORS (Cross-Origin Resource Sharing) for browser cross
  #     domain api call
  # - authorizer: authenticate using the AWS IAM role
  submit:
    handler: submit.main
    events:
      - http:
          path: game-history
          method: post
          cors: true
          authorizer: aws_iam

  # submitunranked:
  #   handler: submit-unranked.main
  #   events:
  #     - http:
  #         path: game-unranked
  #         method: post
  #         cors: true
  #         authorizer: aws_iam

  createprofile:
    handler: createprofile.main
    events:
      - http:
          path: player-profile
          method: post
          cors: true
          authorizer: aws_iam

  editprofile:
    handler: editprofile.main
    events:
      - http:
          path: profile-edit
          method: post
          cors: true
          authorizer: aws_iam

  get:
    handler: get.main
    events:
      - http:
          path: game-history/{id}
          method: get
          cors: true
          authorizer: aws_iam

  gettournament:
    handler: gettournament.main
    events:
      - http:
          path: tournament/{id}
          method: get
          cors: true
          authorizer: aws_iam

  playerlist:
    handler: playerlist.main
    events:
      - http:
          path: get-player-profile
          method: get
          cors: true
          authorizer: aws_iam

  findplayer:
    handler: findplayer.main
    events:
      - http:
          path: get-player-profile/{id}
          method: get
          cors: true
          authorizer: aws_iam

  findfaction:
    handler: findfaction.main
    events:
      - http:
          path: get-faction-profile/{id}
          method: get
          cors: true
          authorizer: aws_iam

  listplayers:
    handler: listplayers.main
    events:
      - http:
          path: get-all-players
          method: get
          cors: true
          authorizer: aws_iam

  listfactions:
    handler: listfactions.main
    events:
      - http:
          path: get-all-factions
          method: get
          cors: true
          authorizer: aws_iam

  listtournaments:
    handler: listtournaments.main
    events:
      - http:
          path: get-tournaments
          method: get
          cors: true
          authorizer: aws_iam

  findplayergames:
    handler: findplayergames.main
    events:
      - http:
          path: get-player-games/{id}
          method: get
          cors: true
          authorizer: aws_iam

  findfactiongames:
    handler: findfactiongames.main
    events:
      - http:
          path: get-faction-games/{id}
          method: get
          cors: true
          authorizer: aws_iam

  factioncommanders:
    handler: factioncommanders.main
    events:
      - http:
          path: get-faction-commanders/{id}
          method: get
          cors: true
          authorizer: aws_iam

  tournamentplayers:
    handler: tournamentplayers.main
    events:
      - http:
          path: get-tournament-players/{id}
          method: get
          cors: true
          authorizer: aws_iam

  tournamentgames:
    handler: tournamentgames.main
    events:
      - http:
          path: get-tournament-games/{id}
          method: get
          cors: true
          authorizer: aws_iam

  calculate:
    handler: calculate.main
    events:
      - http:
          path: calculate/{id}
          method: put
          cors: true
          authorizer: aws_iam

  deleteresult:
    handler: deleteresult.main
    events:
      - http:
          path: deleteresult/{id}
          method: put
          cors: true
          authorizer: aws_iam

  removeplayer:
    handler: removeplayer.main
    events:
      - http:
          path: remove-player
          method: put
          cors: true
          authorizer: aws_iam

  removeround:
    handler: removeround.main
    events:
      - http:
          path: remove-round
          method: put
          cors: true
          authorizer: aws_iam

  createtournament:
    handler: createtournament.main
    events:
      - http:
          path: createtournament
          method: post
          cors: true
          authorizer: aws_iam

  submitplayer:
    handler: submitplayer.main
    events:
      - http:
          path: add-player
          method: post
          cors: true
          authorizer: aws_iam

  swissround:
    handler: swissround.main
    events:
      - http:
          path: swiss-round
          method: post
          cors: true
          authorizer: aws_iam

  tournamentresult:
    handler: tournamentresult.main
    events:
      - http:
          path: tournament-result/{id}
          method: post
          cors: true
          authorizer: aws_iam

  verify:
    handler: verify.main
    events:
      - http:
          path: verify/{id}
          method: post
          cors: true
          authorizer: aws_iam

# Create our resources with separate CloudFormation templates
resources:
  # API Gateway Errors
  - ${file(resources/api-gateway-errors.yml)}
  # DynamoDB
  - ${file(resources/dynamodb-table.yml)}
    # S3
  - ${file(resources/s3-bucket.yml)}
    # Cognito
  - ${file(resources/cognito-user-pool.yml)}
  - ${file(resources/cognito-identity-pool.yml)}