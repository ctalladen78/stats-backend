service: stats-app-api

# Create an optimized package for our functions
package:
  individually: true

plugins:
  - serverless-bundle # Package our functions with Webpack
  - serverless-offline
  - serverless-dotenv-plugin # Load .env as environment variables

provider:
  name: aws
  runtime: nodejs10.x
  stage: prod
  region: eu-west-2

  # These environment variables are made available to our functions
  # under process.env.
  environment:
    tableHistory: game-history
    tablePlayer: player-history2
    tableFaction: faction-history
    tableCommander: commander-history
    tableProfile: player-profile
    tableFactions: faction-profile

  # 'iamRoleStatements' defines the permission policy for the Lambda function.
  # In this case Lambda functions are granted with permissions to access DynamoDB.
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:DescribeTable
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource: "arn:aws:dynamodb:eu-west-2:*:*"

functions:
  # Defines an HTTP API endpoint that calls the main function in create.js
  # - path: url path is /notes
  # - method: POST request
  # - cors: enabled CORS (Cross-Origin Resource Sharing) for browser cross
  #     domain api call
  # - authorizer: authenticate using the AWS IAM role
  submit:
    handler: submit.main
    events:
      - http:
          path: game-history
          method: post
          cors: true
          authorizer: aws_iam

  createprofile:
    handler: createprofile.main
    events:
      - http:
          path: player-profile
          method: post
          cors: true
          authorizer: aws_iam

  get:
    # Defines an HTTP API endpoint that calls the main function in get.js
    # - path: url path is /notes/{id}
    # - method: GET request
    handler: get.main
    events:
      - http:
          path: game-history/{id}
          method: get
          cors: true
          authorizer: aws_iam

  playerlist:
    # Defines an HTTP API endpoint that calls the main function in playerlist.js
    # - path: url path is /notes
    # - method: GET request
    handler: playerlist.main
    events:
      - http:
          path: game-history
          method: get
          cors: true
          authorizer: aws_iam

  factionlist:
    # Defines an HTTP API endpoint that calls the main function in factionlist.js
    # - path: url path is /notes
    # - method: GET request
    handler: factionlist.main
    events:
      - http:
          path: game-history
          method: get
          cors: true
          authorizer: aws_iam

  commanderlist:
    # Defines an HTTP API endpoint that calls the main function in commanderlist.js
    # - path: url path is /notes
    # - method: GET request
    handler: commanderlist.main
    events:
      - http:
          path: game-history
          method: get
          cors: true
          authorizer: aws_iam

  authenticate:
    # Defines an HTTP API endpoint that calls the main function in update.js
    # - path: url path is /notes/{id}
    # - method: PUT request
    handler: authenticate.main
    events:
      - http:
          path: game-history/{id}
          method: put
          cors: true
          authorizer: aws_iam

# Create our resources with separate CloudFormation templates
resources:
  # API Gateway Errors
  - ${file(resources/api-gateway-errors.yml)}